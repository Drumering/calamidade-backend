service: sample-api-fluterando-${env:ENVIRONMENT}
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_ACCOUNT_REGION}
  lambdaHashingVersion: 20201221
  stage: v1
  stackName: ${self:service}-${self:provider.stage}
  deploymentBucket: ${env:AWS_DEPLOYMENT_BUCKET}

  iam:
    role:
      managedPolicies:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
    # Inject serverless iam role

  tracing:
    lambda: true
  logRetentionInDays: 30

  tags:
    Client     : "sample"
    Product    : "sample"
    Service    : "API"
    Environment: ${env:ENVIRONMENT}

  environment:
    NODE_ENV    : ${env:NODE_ENV}
    ENVIRONMENT : ${env:ENVIRONMENT}

    LOG_LEVEL: ${env:LOG_LEVEL}

    HEALTH_BUILD  : ${env:HEALTH_BUILD}
    HEALTH_RELEASE: ${env:HEALTH_RELEASE}

    # Inject environment

  # Inject provider

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-ifelse
  # Inject serverless plugins

custom:
  serverless-offline:
    httpPort: "${env:PORT, '3001'}"
    lambdaPort: 4001

  prune:
    automatic: true
    number: 3

  serverlessIfElse:
  - If: '"${env:NODE_ENV}" == "production"'
    Exclude:
      - functions.api.events.0.httpApi

  # Inject serverless custom

functions:
  api:
    name: ${self:service}_${self:provider.stage}
    handler: src/handler.run
    description: API
    timeout: 30
    memorySize: 256
    url: true
    vpc:
      securityGroupIds:
        - ${env:AWS_VPC_SECURITY_GROUP_LAMBDA}
      subnetIds:
        - ${env:AWS_VPC_SUBNET_NAT_1}
        - ${env:AWS_VPC_SUBNET_NAT_2}
        - ${env:AWS_VPC_SUBNET_NAT_3}
    events:
      - httpApi: '*'
    layers:
      - arn:aws:lambda:${self:provider.region}:580247275435:layer:LambdaInsightsExtension:45
    # Inject serverless functions api settings

# Files on package
package:
  patterns:
    - src/**
    - package-lock.json
    - package.json
    - '.npmrc'
    - '!.devops/**'
    - '!.eslintrc.js'
    - '!azure-pipeline.yaml'
    - '!tests/**'
    - '!.git/**'
    # Inject serverless package patterns

  excludeDevDependencies: true